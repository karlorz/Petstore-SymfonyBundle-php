<?php
/**
 * UserTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Swagger Petstore - OpenAPI 3.0
 *
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\User;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * UserTest Class Doc Comment
 *
 * @category    Class
 * @description User
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\User
 */
class UserTest extends TestCase
{
    protected User|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(User::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(User::class));
        $this->assertInstanceOf(User::class, $this->object);
    }

    /**
     * Test attribute "id"
     *
     * @group unit
     * @small
     */
    public function testPropertyId(): void
    {
        $this->markTestSkipped('Test for property id not implemented');
    }

    /**
     * Test attribute "username"
     *
     * @group unit
     * @small
     */
    public function testPropertyUsername(): void
    {
        $this->markTestSkipped('Test for property username not implemented');
    }

    /**
     * Test attribute "firstName"
     *
     * @group unit
     * @small
     */
    public function testPropertyFirstName(): void
    {
        $this->markTestSkipped('Test for property firstName not implemented');
    }

    /**
     * Test attribute "lastName"
     *
     * @group unit
     * @small
     */
    public function testPropertyLastName(): void
    {
        $this->markTestSkipped('Test for property lastName not implemented');
    }

    /**
     * Test attribute "email"
     *
     * @group unit
     * @small
     */
    public function testPropertyEmail(): void
    {
        $this->markTestSkipped('Test for property email not implemented');
    }

    /**
     * Test attribute "password"
     *
     * @group unit
     * @small
     */
    public function testPropertyPassword(): void
    {
        $this->markTestSkipped('Test for property password not implemented');
    }

    /**
     * Test attribute "phone"
     *
     * @group unit
     * @small
     */
    public function testPropertyPhone(): void
    {
        $this->markTestSkipped('Test for property phone not implemented');
    }

    /**
     * Test attribute "userStatus"
     *
     * @group unit
     * @small
     */
    public function testPropertyUserStatus(): void
    {
        $this->markTestSkipped('Test for property userStatus not implemented');
    }
}
