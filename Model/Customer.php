<?php
/**
 * Customer
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Swagger Petstore - OpenAPI 3.0
 *
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the Customer model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class Customer 
{
        /**
     * @var int|null
     * @SerializedName("id")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $id = null;

    /**
     * @var string|null
     * @SerializedName("username")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $username = null;

    /**
     * @var Address[]|null
     * @SerializedName("address")
     * @Type("array<OpenAPI\Server\Model\Address>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\Address"),
    ])]
    protected ?array $address = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->username = array_key_exists('username', $data) ? $data['username'] : $this->username;
            $this->address = array_key_exists('address', $data) ? $data['address'] : $this->address;
        }
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
    * Sets id.
    *
    * @param int|null $id
    *
    * @return $this
    */
    public function setId(?int $id = null): self
    {
        $this->id = $id;

        return $this;
    }




    /**
     * Gets username.
     *
     * @return string|null
     */
    public function getUsername(): ?string
    {
        return $this->username;
    }

    /**
    * Sets username.
    *
    * @param string|null $username
    *
    * @return $this
    */
    public function setUsername(?string $username = null): self
    {
        $this->username = $username;

        return $this;
    }




    /**
     * Gets address.
     *
     * @return Address[]|null
     */
    public function getAddress(): ?array
    {
        return $this->address;
    }

    /**
    * Sets address.
    *
    * @param Address[]|null $address
    *
    * @return $this
    */
    public function setAddress(?array $address = null): self
    {
        $this->address = $address;

        return $this;
    }



}


